export interface SesionState {
    claims: Claims | any,
    loader: boolean,
    errores: number,
    sesion: boolean
}

export const SessionInitialState: SesionState = {
    claims: {
        email: '',
        name: '',
        oficial: false,
    },
    errores: 0,
    loader: false,
    sesion: false
}

export interface SessionContextProps {
    sesion: boolean,
    loginError: number,
    localState: SesionState,
    InciarSesion: ({ email, password }: inicioSesion) => void,
    CerrarSesion: () => void,
    dispatch: any;
}


export interface Registro {
    nombre: string,
    email: string,
    password: string,
    oficial: boolean
}

export interface inicioSesion {
    email: string,
    password: string
}

export interface UsuarioLogueado {
    isSignedIn: boolean,
    pending: boolean,
    user: Claims,
}


export interface listaExamenes {
    pending: boolean,
    examenes: []
}

// Generated by https://quicktype.io

export interface TokenID {
    token: string;
    expirationTime: string;
    authTime: string;
    issuedAtTime: string;
    signInProvider: string;
    signInSecondFactor: null;
    claims: Claims;
}

export interface Claims {
    name: string;
    oficial: boolean;
    email: string;
}

export interface Firebase {
    identities: Identities;
    sign_in_provider: string;
}

export interface Identities {
    email: string[];
}


export interface ErrorLoginTypes {
    code: string;
    message: string;
}


export interface Usuario {
    user: User;
    credential: null;
    additionalUserInfo: AdditionalUserInfo;
    operationType: string;
}

export interface AdditionalUserInfo {
    providerId: string;
    isNewUser: boolean;
}

export interface User {
    uid: string;
    displayName: string;
    photoURL: null;
    email: string;
    emailVerified: boolean;
    phoneNumber: null;
    isAnonymous: boolean;
    tenantId: null;
    providerData: ProviderDatum[];
    apiKey: string;
    appName: string;
    authDomain: string;
    stsTokenManager: StsTokenManager;
    redirectEventId: null;
    lastLoginAt: string;
    createdAt: string;
    multiFactor: MultiFactor;
}

export interface MultiFactor {
    enrolledFactors: any[];
}

export interface ProviderDatum {
    uid: string;
    displayName: string;
    photoURL: null;
    email: string;
    phoneNumber: null;
    providerId: string;
}

export interface StsTokenManager {
    apiKey: string;
    refreshToken: string;
    accessToken: string;
    expirationTime: number;
}
